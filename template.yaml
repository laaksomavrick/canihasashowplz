AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - staging
      - prod
  GitShaHash:
    Type: String
    Default: latest
  WorkerTimeout:
    Type: Number
    Default: 900

Globals:
  Function:
    Architectures:
      - x86_64
    Timeout: 30
    MemorySize: 128
    AutoPublishAlias: live
    DeploymentPreference:
      Type: AllAtOnce

Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]
  IsStaging: !Equals [!Ref Environment, "staging"]

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      EndpointConfiguration:
        Type: REGIONAL

  PredictionAckFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt PredictionAckRole.Arn
      Environment:
        Variables:
          PREDICTION_QUEUE_URL: !Ref PredictionRequestQueue
      Events:
        Query:
          Type: Api
          Properties:
            Path: /shows/recommend
            Method: post
            RestApiId: !Ref ApiGateway
      LoggingConfig:
        ApplicationLogLevel: INFO
        LogFormat: JSON
    Metadata:
      Dockerfile: ./Dockerfile
      DockerContext: ./lambdas/prediction-ack
      DockerTag: !If [ IsProd, !Ref GitShaHash, latest ]

  PredictionAckFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PredictionAckFunction}
      RetentionInDays: !If [ IsProd, 30, 7 ]

  PredictionAckRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole'
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-PredictionRequestQueueSender
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                Resource: !GetAtt PredictionRequestQueue.Arn

  PredictionWorkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt PredictionWorkerRole.Arn
      Environment:
        Variables:
          PREDICTION_TABLE_NAME: !Ref PredictionTable
      Timeout: !Ref WorkerTimeout
      MemorySize: 10240
      Events:
        PredictionRequest:
          Type: SQS
          Properties:
            Queue: !GetAtt PredictionRequestQueue.Arn
      LoggingConfig:
        ApplicationLogLevel: INFO
        LogFormat: JSON
    Metadata:
      Dockerfile: ./Dockerfile
      DockerContext: ./lambdas/prediction-worker
      DockerTag: !If [ IsProd, !Ref GitShaHash, latest ]

  PredictionWorkerFunctionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PredictionWorkerFunction}
      RetentionInDays: !If [ IsProd, 30, 7 ]

  PredictionWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole'
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-PredictionRequestQueueReceiver
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                Resource: !GetAtt PredictionRequestQueue.Arn
        - PolicyName: !Sub ${AWS::StackName}-PredictionRequestData
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGet*"
                  - "dynamodb:DescribeStream"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:Get*"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:BatchWrite*"
                  - "dynamodb:CreateTable"
                  - "dynamodb:Delete*"
                  - "dynamodb:Update*"
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt ShowTable.Arn
                  - !Sub
                    - ${TableName}/*
                    - TableName: !GetAtt ShowTable.Arn
                  - !GetAtt RatingTable.Arn
                  - !Sub
                    - ${TableName}/*
                    - TableName: !GetAtt RatingTable.Arn
                  - !GetAtt PredictionTable.Arn
                  - !Sub
                    - ${TableName}/*
                    - TableName: !GetAtt PredictionTable.Arn

  PredictionRequestQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: !Ref WorkerTimeout

  ShowTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableClass: STANDARD
      TableName: !Sub ${AWS::StackName}-ShowsV1
      AttributeDefinitions:
        - AttributeName: ShowId
          AttributeType: S
        - AttributeName: Title
          AttributeType: S
      KeySchema:
        - AttributeName: ShowId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TitleGSI
          KeySchema:
            - AttributeName: Title
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - ShowId
            ProjectionType: "INCLUDE"

  RatingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableClass: STANDARD
      TableName: !Sub ${AWS::StackName}-RatingsV1
      AttributeDefinitions:
        - AttributeName: ShowId
          AttributeType: S
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: ShowId
          KeyType: HASH
        - AttributeName: UserId
          KeyType: RANGE

  PredictionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableClass: STANDARD
      TableName: !Sub ${AWS::StackName}-PredictionsV1
      AttributeDefinitions:
        - AttributeName: PredictionId
          AttributeType: S
      KeySchema:
        - AttributeName: PredictionId
          KeyType: HASH

  ModelInferenceRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}/modelinferencerepo
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:GetRepositoryPolicy"


  # Upload model to S3 as a gzipped tar file



#  SageMakerExecutionRole:
#    Type: "AWS::IAM::Role"
#    # Define SageMaker execution role permissions
#
#  SageMakerModel:
#    Type: "AWS::SageMaker::Model"
#    Properties:
#      ExecutionRoleArn: !GetAtt SageMakerExecutionRole.Arn
#      PrimaryContainer:
#        ModelDataUrl: "s3://your-bucket/model/model.tar.gz"  # Path to your serialized model
#        Image: "683313688378.dkr.ecr.us-west-2.amazonaws.com/sagemaker-scikit-learn:0.23-1-cpu-py3" # ECR reference to our inference.py
#        Environment:
#          Variables:
#          # processed transposed ratings csv path,
#      # ...
#
#  SageMakerEndpointConfig:
#    Type: "AWS::SageMaker::EndpointConfig"
#    Properties:
#      EndpointConfigName: "YourEndpointConfig"
#      ProductionVariants:
#        - VariantName: "Variant1"
#          ModelName: !Ref SageMakerModel
#          InitialInstanceCount: 1
#          InstanceType: ml.m5.large
#          # Other variant properties
#          # ...
#
#  SageMakerEndpoint:
#    Type: "AWS::SageMaker::Endpoint"
#    Properties:
#      EndpointConfigName: !Ref SageMakerEndpointConfig
#      EndpointName: "YourSageMakerEndpoint"
#      # Other endpoint properties
#      # ...

Outputs:
  AppApi:
    Description: "API Gateway endpoint URL for Prod stage for Inference function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/v1/shows/recommend/"
