AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - staging
      - prod
  GitShaHash:
    Type: String
    Default: latest
  WorkerTimeout:
    Type: Number
    Default: 900

Globals:
  Function:
    Architectures:
      - x86_64
    Timeout: 30
    MemorySize: 128
    AutoPublishAlias: live
    DeploymentPreference:
      Type: AllAtOnce

Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]
  IsStaging: !Equals [!Ref Environment, "staging"]

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      EndpointConfiguration:
        Type: REGIONAL

  PredictionAckFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt PredictionAckRole.Arn
      Environment:
        Variables:
          PREDICTION_QUEUE_URL: !Ref PredictionRequestQueue
      Events:
        Query:
          Type: Api
          Properties:
            Path: /shows/recommend
            Method: post
            RestApiId: !Ref ApiGateway
      LoggingConfig:
        ApplicationLogLevel: INFO
        LogFormat: JSON
    Metadata:
      Dockerfile: ./Dockerfile
      DockerContext: ./lambdas/prediction-ack
      DockerTag: !If [ IsProd, !Ref GitShaHash, latest ]

  PredictionAckFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PredictionAckFunction}
      RetentionInDays: !If [ IsProd, 30, 7 ]

  PredictionAckRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole'
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-PredictionRequestQueueSender
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                Resource: !GetAtt PredictionRequestQueue.Arn

  PredictionWorkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt PredictionWorkerRole.Arn
      Environment:
        Variables:
          PREDICTION_TABLE_NAME: !Ref PredictionTable
      Timeout: !Ref WorkerTimeout
      MemorySize: 10240
      Events:
        PredictionRequest:
          Type: SQS
          Properties:
            Queue: !GetAtt PredictionRequestQueue.Arn
      LoggingConfig:
        ApplicationLogLevel: INFO
        LogFormat: JSON
    Metadata:
      Dockerfile: ./Dockerfile
      DockerContext: ./lambdas/prediction-worker
      DockerTag: !If [ IsProd, !Ref GitShaHash, latest ]

  PredictionWorkerFunctionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PredictionWorkerFunction}
      RetentionInDays: !If [ IsProd, 30, 7 ]

  PredictionWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole'
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-PredictionRequestQueueReceiver
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                Resource: !GetAtt PredictionRequestQueue.Arn
        - PolicyName: !Sub ${AWS::StackName}-PredictionRequestData
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGet*"
                  - "dynamodb:DescribeStream"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:Get*"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:BatchWrite*"
                  - "dynamodb:CreateTable"
                  - "dynamodb:Delete*"
                  - "dynamodb:Update*"
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt ShowTable.Arn
                  - !Sub
                    - ${TableName}/*
                    - TableName: !GetAtt ShowTable.Arn
                  - !GetAtt RatingTable.Arn
                  - !Sub
                    - ${TableName}/*
                    - TableName: !GetAtt RatingTable.Arn
                  - !GetAtt PredictionTable.Arn
                  - !Sub
                    - ${TableName}/*
                    - TableName: !GetAtt PredictionTable.Arn

  PredictionRequestQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: !Ref WorkerTimeout

  ShowTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableClass: STANDARD
      TableName: !Sub ${AWS::StackName}-ShowsV1
      AttributeDefinitions:
        - AttributeName: ShowId
          AttributeType: S
        - AttributeName: Title
          AttributeType: S
      KeySchema:
        - AttributeName: ShowId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TitleGSI
          KeySchema:
            - AttributeName: Title
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - ShowId
            ProjectionType: "INCLUDE"

  RatingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableClass: STANDARD
      TableName: !Sub ${AWS::StackName}-RatingsV1
      AttributeDefinitions:
        - AttributeName: ShowId
          AttributeType: S
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: ShowId
          KeyType: HASH
        - AttributeName: UserId
          KeyType: RANGE

  PredictionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableClass: STANDARD
      TableName: !Sub ${AWS::StackName}-PredictionsV1
      AttributeDefinitions:
        - AttributeName: PredictionId
          AttributeType: S
      KeySchema:
        - AttributeName: PredictionId
          KeyType: HASH

  ModelInferenceRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}/modelinferencerepo
      RepositoryPolicyText:
        Version: "2012-10-17"
#        Statement:
#          - Sid: AllowSageMakerAccess
#            Effect: Allow
#            Principal:
#              Service: "sagemaker.amazonaws.com"
#            Action:
#              - "ecr:BatchCheckLayerAvailability"
#              - "ecr:GetDownloadUrlForLayer"
#              - "ecr:BatchGetImage"
        Statement:
          - Sid: AllowSageMakerAccess
            Effect: Allow
            Principal:
              Service: "sagemaker.amazonaws.com"
            Action:
              - "ecr:*"
              - "sagemaker:*"


  ModelBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-modelbucket

  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "sagemaker.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "S3AccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !GetAtt ModelBucket.Arn
                  - !Sub
                    - ${BucketArn}/*
                    - BucketArn: !GetAtt ModelBucket.Arn
        - PolicyName: "ECRAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:ListImages"
                Resource:
                  - !GetAtt ModelInferenceRepository.Arn
        - PolicyName: "CloudwatchAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "cloudwatch:PutMetricData"
                Resource: "*"
                Condition:
                  StringLike:
                    cloudwatch:namespace:
                      - "*SageMaker*"
                      - "*Sagemaker*"
                      - "*sagemaker*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:CreateLogGroup"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:log-group:/aws/sagemaker/*"
        - PolicyName: "ECRFullAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "ecr:*"
                Resource: "*"

  SageMakerModel:
    Type: AWS::SageMaker::Model
    Properties:
      ExecutionRoleArn: !GetAtt SageMakerExecutionRole.Arn
      PrimaryContainer:
        Image: !Sub
                  - ${RepositoryUri}:modelinference
                  - RepositoryUri: !GetAtt ModelInferenceRepository.RepositoryUri
        ModelDataUrl: !Sub s3://${ModelBucket}/model.tar.gz

  SageMakerEndpoint:
    Type: AWS::SageMaker::Endpoint
    Properties:
      EndpointConfigName: !GetAtt SageMakerServerlessEndpointConfig.EndpointConfigName
      EndpointName: !Sub ${AWS::StackName}

  SageMakerServerlessEndpointConfig:
    Type: AWS::SageMaker::EndpointConfig
    Properties:
      ProductionVariants:
        - InitialVariantWeight: 1
          ModelName: !GetAtt SageMakerModel.ModelName
          VariantName: 'AllTraffic'
          ServerlessConfig:
            MaxConcurrency: 1
            MemorySizeInMB: 5120

Outputs:
  AppApi:
    Description: "API Gateway endpoint URL for Prod stage for Inference function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/v1/shows/recommend/"
